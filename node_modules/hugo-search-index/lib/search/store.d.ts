/// <reference types="node" />
import { EventEmitter } from 'events';
import { Index, SearchResult as InternalSearchResult } from 'search-index';
export declare type SearchCallback = (error: Error, results?: SearchResult[]) => void;
export interface SearchResult extends InternalSearchResult {
    /** The 'id' field of the document */
    id: string;
    /** The "relevance score" of the document to the search.  Use this to order results by relevance. */
    score: number;
    /** The criteria by which the document was scored. */
    scoringCriteria: any;
    /** The document itself - prepared by the gulp task from the markdown data */
    document: {
        /** relative path of the markdown file ex. `post/first_post.md`  */
        id: string;
        /** language of the markdown file for multilang sites ('en' if not specified) */
        lang: string;
        /** http url of the rendered file in the site, not including hostname i.e. `/post/first_post.md` */
        relativeurl: string;
        /** rendered markdown content stripped of HTML tags */
        body: string;
        /** a dictionary of front matter data, the YAML TOML or JSON at the top of the markdown file.
         * Every key is lowercased even if it was upper case in the front matter.
         */
        [key: string]: any;
    };
}
export declare class SearchStore extends EventEmitter {
    /** The search string which was most recently executed by runSearch */
    currentQuery: string;
    /** An array of previous search strings */
    queryHistory: string[];
    /** The current search results, undefined if the current search errored. */
    results: SearchResult[];
    /** The most recent error, undefined if the current search came back with success. */
    lastError: string;
    /** True if there is a search in progress */
    inProgress: boolean;
    private index;
    constructor(index: Index);
    /** Executes a search query, with an optional language specifier.  Calls the SearchCallback when finished, and updates the state. */
    runSearch(query: string, lang?: string | SearchCallback, cb?: SearchCallback): void;
}
export default SearchStore;
