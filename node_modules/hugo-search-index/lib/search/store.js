var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
var events_1 = require("events");
var SearchStore = (function (_super) {
    __extends(SearchStore, _super);
    function SearchStore(index) {
        var _this = _super.call(this) || this;
        _this.index = index;
        _this.queryHistory = [];
        _this.results = [];
        return _this;
    }
    /** Executes a search query, with an optional language specifier.  Calls the SearchCallback when finished, and updates the state. */
    SearchStore.prototype.runSearch = function (query, lang, cb) {
        var _this = this;
        if (!cb && typeof lang === 'function') {
            cb = lang;
            lang = undefined;
        }
        if (this.currentQuery) {
            this.queryHistory.splice(0, 0, this.currentQuery);
        }
        this.inProgress = true;
        this.currentQuery = query;
        var results = [];
        // remove whitespace
        query = query.trim();
        // search index only handles lower case - no matches on uppercase
        query = query.toLocaleLowerCase();
        var queryObj = {
            AND: {
                '*': query.split(' ')
            }
        };
        if (lang) {
            queryObj.AND.lang = [lang];
        }
        this.emit('start', query, queryObj);
        this.index.search({ query: queryObj })
            .on('data', function (doc) {
            results.push(doc);
            _this.emit('data', doc);
        })
            .on('end', function () {
            _this.inProgress = false;
            _this.results = results.slice();
            _this.emit('end', results);
            cb(undefined, results);
        })
            .on('error', function (error) {
            _this.results = undefined;
            _this.lastError = error;
            _this.emit('error', error);
            cb(error);
        });
    };
    return SearchStore;
}(events_1.EventEmitter));
exports.SearchStore = SearchStore;
exports["default"] = SearchStore;
