exports.__esModule = true;
var Path = require("path");
var SearchIndexLoader_1 = require("./SearchIndexLoader");
var store_1 = require("./store");
var searchIndexOptions = {
    keySeparator: '~'
};
function downloadIndexLocation(url, cb) {
    var oReq = new XMLHttpRequest();
    oReq.onload = function (oEvent) {
        var lines = oReq.responseText.split('\n');
        cb(null, lines[0]);
    };
    oReq.onerror = function (oError) {
        cb(oError.message);
    };
    oReq.open('GET', url, true);
    oReq.send();
}
function downloadIndex(url, cb) {
    var oReq = new XMLHttpRequest();
    oReq.onload = function (oEvent) {
        var arrayBuffer = oReq.response; // Note: not oReq.responseText
        if (arrayBuffer) {
            var byteArray = new Uint8Array(arrayBuffer);
            cb(null, byteArray);
        }
        else {
            cb('No response buffer at ' + url);
        }
    };
    oReq.onerror = function (oError) {
        cb(oError.message);
    };
    oReq.responseType = 'arraybuffer';
    oReq.open('GET', url, true);
    oReq.send();
}
function InitSearch(indexUrl, optionsOrCb, cb) {
    var options = {
        cacheExpiration: 24 * 60 * 60 * 1000
    };
    if (cb) {
        for (var key in options) {
            if (options.hasOwnProperty(key) && optionsOrCb[key]) {
                options[key] = optionsOrCb[key];
            }
        }
    }
    else {
        cb = optionsOrCb;
    }
    downloadIndexLocation(indexUrl, function (err1, location) {
        if (err1) {
            cb(err1);
            return;
        }
        var prevLocation = localStorage.getItem('hugo-search-index.location');
        var expiresAt = localStorage.getItem('hugo-search-index.expires');
        if (prevLocation && prevLocation === location) {
            if (expiresAt && expiresAt > Date.now().toString()) {
                // we're good
                SearchIndex(searchIndexOptions, function (err2, index) {
                    cb(err2, new store_1.SearchStore(index));
                });
                return;
            }
        }
        // need to rebuild the index
        indexUrl = Path.join(indexUrl, location);
        downloadIndex(indexUrl, function (downloadErr, data) {
            if (downloadErr) {
                cb(downloadErr);
                return;
            }
            // console.log('index downloaded, size: ' + (data.length / 1024).toFixed(1) + ' KB')
            var loader = new SearchIndexLoader_1.SearchIndexLoader(undefined, searchIndexOptions);
            loader.load(data, function (loadErr, index) {
                if (loadErr) {
                    cb(loadErr);
                    return;
                }
                localStorage.setItem('hugo-search-index.location', location);
                localStorage.setItem('hugo-search-index.expires', (Date.now() + options.cacheExpiration).toString());
                var store = new store_1.SearchStore(index);
                cb(null, store);
            });
        });
    });
}
exports.InitSearch = InitSearch;
exports["default"] = InitSearch;
var store_2 = require("./store");
exports.SearchStore = store_2.SearchStore;
var SearchIndexLoader_2 = require("./SearchIndexLoader");
exports.SearchIndexLoader = SearchIndexLoader_2.SearchIndexLoader;
